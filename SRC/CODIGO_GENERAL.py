# -*- coding: utf-8 -*-
"""CODIGO EN UN SOLO BLOQUE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19SPCZpCCBaIC2aisIDkd05f5PbwpAqjS
"""

# =============================================================================
# LMA Parking Lott - Sistema de Parqueadero
# =============================================================================

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statistics as st
import math as mt
from datetime import datetime
from pytz import timezone
import time
import os
import getpass

# =============================================================================
# Variables
# =============================================================================

usuarios = {
    'Nombre': [],
    'Apellido': [],
    'Documento': [],
    'Placa': [],
    'Registrado por': []
}

registro = {}

historico = {
    'Placa': [],
    'Documento': [],
    'Fecha Registro': [],
    'Tiempo en Parqueadero': [],
    'Total a Pagar': [],
    'Admin Ingreso': [],
    'Admin Retiro': []
}

administradores = {
    'lorena': '1234',
    'mafe': '5678',
    'anny': '9012'
}

bogota_timezone = timezone('America/Bogota')

# =============================================================================
# Validaciones
# =============================================================================

def validar_nombre(nombre):
    while True:
        if len(nombre) < 3:
            nombre = input(" El nombre debe tener al menos 3 letras. Intente de nuevo: ")
        elif any(char.isdigit() for char in nombre):
            nombre = input(" El nombre no puede contener números. Intente de nuevo: ")
        else:
            return nombre.capitalize()

def validar_apellido(apellido):
    while True:
        if len(apellido) < 3:
            apellido = input(" El apellido debe tener al menos 3 letras. Intente de nuevo: ")
        elif any(char.isdigit() for char in apellido):
            apellido = input(" El apellido no puede contener números. Intente de nuevo: ")
        else:
            return apellido.capitalize()

def validar_documento(documento):
    while True:
        if not documento.isdigit():
            documento = input(" El documento debe contener solo números. Intente de nuevo: ")
        elif not (3 <= len(documento) <= 15):
            documento = input(" Longitud inválida. Intente de nuevo: ")
        else:
            return documento

def validar_placa(placa):
    while True:
        if len(placa) != 6:
            placa = input(" La placa debe tener exactamente 6 caracteres. Intente de nuevo: ")
        elif not (placa[:3].isalpha() and placa[3:].isdigit()):
            placa = input(" Formato incorrecto. Use 3 letras seguidas de 3 números: ")
        else:
            return placa.upper()

# =============================================================================
# Autenticación Administrador
# =============================================================================

def autenticar_admin():
    print("\n Autenticación de Administrador")
    while True:
        usuario = input("Usuario administrador: ").lower().strip()
        clave = getpass.getpass("Contraseña: ")
        if usuario in administradores and administradores[usuario] == clave:
            print(f" Bienvenido, {usuario.capitalize()}.")
            return usuario.capitalize()
        else:
            print(" Usuario o contraseña incorrectos. Intente de nuevo.")


# =============================================================================
# Registro de Usuario
# =============================================================================

def registrar_usuario():
    admin_registro = autenticar_admin()
    print("\n Registro de Usuario")
    nombre = validar_nombre(input("Nombre: "))
    apellido = validar_apellido(input("Apellido: "))
    documento = validar_documento(input("Documento: "))

    if documento in usuarios['Documento']:
        index = usuarios['Documento'].index(documento)
        nombre_existente = usuarios['Nombre'][index]
        apellido_existente = usuarios['Apellido'][index]
        placa_existente = usuarios['Placa'][index]
        print("\n Este usuario ya está registrado:")
        print(f"Nombre Completo : {nombre_existente} {apellido_existente}")
        print(f"Placa del Vehículo: {placa_existente}")
        return

    placa = validar_placa(input("Placa del vehículo (3 letras y 3 números): "))

    usuarios['Nombre'].append(nombre)
    usuarios['Apellido'].append(apellido)
    usuarios['Documento'].append(documento)
    usuarios['Placa'].append(placa)
    usuarios['Registrado por'].append(admin_registro)

    print(f"\nUsuario {nombre} {apellido} con placa {placa} registrado con éxito.")

# =============================================================================
# Ingreso de Vehículo
# =============================================================================

def ingresar_vehiculo(admin_actual):
    print("\nIngreso de Vehículo")
    while True:
        placa = validar_placa(input("Ingrese la placa: "))
        if placa not in usuarios['Placa']:
            print("Vehículo no registrado.")
            salir = input("¿Desea intentar con otra placa? (S/N): ").strip().lower()
            if salir == 'n':
                print("Regresando al menú principal...")
                break
        elif placa in registro:
            print("Este vehículo ya está en el parqueadero.")
            index = usuarios['Placa'].index(placa)
            nombre = usuarios['Nombre'][index]
            apellido = usuarios['Apellido'][index]
            print(f"Propietario: {nombre} {apellido}")
            salir = input("¿Desea intentar con otra placa? (S/N): ").strip().lower()
            if salir == 'n':
                print("Regresando al menú principal...")
                break
        else:
            ahora = datetime.now(bogota_timezone)
            registro[placa] = {
                'hora_ingreso': ahora,
                'admin_ingreso': admin_actual
            }
            hora_ingreso = ahora.strftime('%Y-%m-%d %H:%M:%S')
            index = usuarios['Placa'].index(placa)
            nombre = usuarios['Nombre'][index]
            apellido = usuarios['Apellido'][index]
            print(f"Vehículo con placa {placa} ingresado a las {hora_ingreso}")
            print(f"Propietario: {nombre} {apellido}")
            break

# =============================================================================
# Retiro de Vehículo
# =============================================================================

def retirar_vehiculo(admin_actual):
    print("\n Retiro de Vehículo")
    while True:
        placa = validar_placa(input("Ingrese la placa del vehículo: "))
        if placa not in registro:
            print(" Este vehículo no se encuentra ingresado.")
            salir = input("¿Desea intentar con otra placa? (S/N): ").strip().lower()
            if salir == 'n':
                print(" Regresando al menú principal...")
                break
        else:
            hora_entrada = registro[placa]['hora_ingreso']
            admin_ingreso = registro[placa].get('admin_ingreso', 'Desconocido')
            ahora = datetime.now(bogota_timezone)
            duracion = ahora - hora_entrada
            minutos = int(duracion.total_seconds() // 60)
            horas = minutos // 60
            cuartos = (minutos % 60) // 15
            total = horas * 7000 + cuartos * 1500
            if total < 7000:
                total = 7000
            tiempo_legible = f"{minutos//60}h {minutos%60}min"
            documento = usuarios['Documento'][usuarios['Placa'].index(placa)]
            cliente_nombre = usuarios['Nombre'][usuarios['Placa'].index(placa)]
            cliente_apellido = usuarios['Apellido'][usuarios['Placa'].index(placa)]
            historico['Placa'].append(placa)
            historico['Documento'].append(documento)
            historico['Fecha Registro'].append(
                hora_entrada.strftime('%Y-%m-%d %H:%M:%S'))
            historico['Tiempo en Parqueadero'].append(tiempo_legible)
            historico['Total a Pagar'].append(total)
            historico['Admin Ingreso'].append(admin_ingreso)
            historico['Admin Retiro'].append(admin_actual)
            del registro[placa]

            factura = f"""
+-----------------------------------------------------------------------+
|                        LMA PARKING LOTT
|       Cra 45 #12-34, Medellín  |   601 456 7890
|                    contacto@lmapark.co
|            Perfecto para tu auto, ideal para ti
+-----------------------------------------------------------------------+
|  Cliente         :  {cliente_nombre} {cliente_apellido}
|  Documento       :  {documento}
|  Placa           :  {placa}
|  Fecha de Ingreso:  {hora_entrada.strftime('%Y-%m-%d %H:%M:%S')}
|  Tiempo          :  {tiempo_legible}
|  Total a Pagar   :  ${total:,}
|  Ingresado por   :  {admin_ingreso}
|  Retirado por    :  {admin_actual}
+=======================================================================+
|                      ¡Gracias por preferirnos!
|            Que tengas un excelente viaje y vuelve pronto.
+=======================================================================+

                          _______
                         /|_||_\\`.__
                       (   _    _ _  |
----------------------- =`-(_)--(_)-'------------------------------------
"""
            print(factura)
            break

# =============================================================================
# Guardar en CSV
# =============================================================================

def guardar_datos_csv():
    pd.DataFrame(usuarios).to_csv('usuarios.csv', index=False)
    pd.DataFrame(historico).to_csv('historico.csv', index=False)
    print(" Datos guardados correctamente.")

# =============================================================================
# Consulta de Histórico
# =============================================================================

def consultar_historico():
    print("\n Consultar Histórico")
    df = pd.DataFrame(historico)
    while True:
        opcion = input("Buscar por (1) Placa o (2) Documento: ")
        if opcion == '1':
            valor = input("Ingrese la placa: ").upper().strip()
            resultado = df[df['Placa'] == valor]
        elif opcion == '2':
            valor = input("Ingrese el documento: ").strip()
            resultado = df[df['Documento'] == valor]
        else:
            print(" Opción inválida.")
            continue

        if resultado.empty:
            print(" No se encontraron registros.")
        else:
            print("\n Resultados ")
            print(resultado.to_string(index=False))
        break

# =============================================================================
# Gráfica de Histórico
# =============================================================================

def graficar_historico():
    if not historico['Admin Retiro']:
        print(" No hay datos suficientes para graficar.")
        return

    df = pd.DataFrame(historico)

    conteo_ingresos = df['Admin Ingreso'].value_counts()
    conteo_retiros = df['Admin Retiro'].value_counts()

    resumen = pd.DataFrame({
        'Ingresos': conteo_ingresos,
        'Retiros': conteo_retiros
    }).fillna(0)

    registros = pd.Series(usuarios['Registrado por']).value_counts()
    resumen['Registrados'] = registros
    resumen = resumen.fillna(0).astype(int)

    resumen.plot(kind='bar', figsize=(10, 6), edgecolor='black',
                 colormap='Set2')
    plt.title('Acciones por Administrador')
    plt.xlabel('Administrador')
    plt.ylabel('Cantidad')
    plt.xticks(rotation=0)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


# =============================================================================
# Funciones Adicionales del Menú de Administración
# =============================================================================

def calcular_promedio_estancia():
    if not historico['Tiempo en Parqueadero']:
        print(" No hay datos suficientes para calcular el promedio.")
        return

    tiempos_minutos = []
    for tiempo in historico['Tiempo en Parqueadero']:
        partes = tiempo.split()
        horas = int(partes[0][:-1])
        minutos = int(partes[1][:-3])
        total = horas * 60 + minutos
        tiempos_minutos.append(total)

    promedio = sum(tiempos_minutos) / len(tiempos_minutos)
    horas_prom = int(promedio // 60)
    mins_prom = int(promedio % 60)
    print(f" Tiempo promedio de estancia: {horas_prom}h {mins_prom}min")

def vehiculos_tiempo_extremos():
    if not historico['Tiempo en Parqueadero']:
        print(" No hay datos para analizar.")
        return

    tiempos_min = []
    for tiempo in historico['Tiempo en Parqueadero']:
        partes = tiempo.split()
        horas = int(partes[0][:-1])
        minutos = int(partes[1][:-3])
        total = horas * 60 + minutos
        tiempos_min.append(total)

    max_idx = tiempos_min.index(max(tiempos_min))
    min_idx = tiempos_min.index(min(tiempos_min))

    print("\n Vehículo con mayor tiempo:")
    print(f" Placa: {historico['Placa'][max_idx]}")
    print(f" Tiempo: {historico['Tiempo en Parqueadero'][max_idx]}")

    print("\n Vehículo con menor tiempo:")
    print(f" Placa: {historico['Placa'][min_idx]}")
    print(f" Tiempo: {historico['Tiempo en Parqueadero'][min_idx]}")

# =============================================================================
# Menú de Administración
# =============================================================================

def menu_administracion():
    admin = autenticar_admin()
    while True:
        print("\n--- Menú de Administración ---")
        print("1. Total de vehículos registrados")
        print("2. Total de vehículos retirados")
        print("3. Total de vehículos sin retirar")
        print("4. Total recaudado por parqueo")
        print("5. Tiempo promedio de estancia")
        print("6. Lista de usuarios")
        print("7. Vehículo con tiempo máximo y mínimo")
        print("8. Volver al menú principal")

        op = input("Seleccione una opción: ")

        if op == '1':
            print("\nTotal registrados:", len(usuarios['Placa']))
        elif op == '2':
            print("Total retirados:", len(historico['Placa']))
        elif op == '3':
            print("Total sin retirar:", len(registro))
        elif op == '4':
            print("Total recaudado: $", sum(historico['Total a Pagar']))
        elif op == '5':
            calcular_promedio_estancia()
        elif op == '6':
            print("\nLista de usuarios:")
            print(pd.DataFrame(usuarios).to_string(index=False))
        elif op == '7':
            vehiculos_tiempo_extremos()
        elif op == '8':
            print("Saliendo del módulo de administración...")
            break
        else:
            print("Opción inválida.")

# =============================================================================
# Menú Principal
# =============================================================================

def menu_principal():
    print("\n Bienvenido a LMA Parking Lott")
    print(" Sistema de Parqueadero Automatizado")
    while True:
        print("\n Menú Principal")
        print("1️ Registrar Usuario")
        print("2️ Ingresar Vehículo")
        print("3️ Retirar Vehículo")
        print("4️ Consultar Histórico")
        print("5️ Guardar")
        print("6️ Salir")
        print("7️ Ver Gráfico Histórico")
        print("8️ Administración")

        opcion = input("Seleccione una opción: ")
        if opcion == '1':
            registrar_usuario()
        elif opcion in ['2', '3']:
            admin = autenticar_admin()
            if opcion == '2':
                ingresar_vehiculo(admin)
            else:
                retirar_vehiculo(admin)
        elif opcion == '4':
            consultar_historico()
        elif opcion == '5':
            guardar_datos_csv()
        elif opcion == '6':
            print(" Hasta pronto.")
            break
        elif opcion == '7':
            graficar_historico()
        elif opcion == '8':
            menu_administracion()
        else:
            print(" Opción no válida.")

if __name__ == "__main__":
    menu_principal()
